class g{constructor(e){this.audioContext=e,this.analyser=null,this.dataArray=null,this.bufferLength=0,this.fftSize=2048}initialize(e=2048){return this.fftSize=e,this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=e,this.bufferLength=this.analyser.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength),this.analyser}getFrequencyData(){return this.analyser?(this.analyser.getByteFrequencyData(this.dataArray),new Uint8Array(this.dataArray)):null}getTimeDomainData(){return this.analyser?(this.analyser.getByteTimeDomainData(this.dataArray),new Uint8Array(this.dataArray)):null}analyzeAudioBuffer(e){const n=e.getChannelData(0),a=e.sampleRate,t=this.fftSize,l=t/2,r=[];for(let s=0;s<n.length-t;s+=l){const i=n.slice(s,s+t),o=this.performFFT(i);r.push({time:s/a,frequencies:o})}return r}performFFT(e){const n=e.length,a=new Array(n/2);for(let t=0;t<n/2;t++){let l=0,r=0;for(let s=0;s<n;s++){const i=-2*Math.PI*t*s/n;l+=e[s]*Math.cos(i),r+=e[s]*Math.sin(i)}a[t]=Math.sqrt(l*l+r*r)}return a}getFrequencyBins(e){const n=[],a=e/2;for(let t=0;t<this.bufferLength;t++)n.push(t*a/this.bufferLength);return n}getPeakFrequency(e,n){let a=0,t=0;for(let r=0;r<e.length;r++)e[r]>a&&(a=e[r],t=r);const l=n/2;return t*l/e.length}getSpectralCentroid(e,n){let a=0,t=0;const l=n/2;for(let r=0;r<e.length;r++){const s=r*l/e.length,i=e[r];a+=s*i,t+=i}return t>0?a/t:0}getRMS(e){let n=0;const a=e.getChannelData(0);for(let t=0;t<a.length;t++)n+=a[t]*a[t];return Math.sqrt(n/a.length)}getZeroCrossingRate(e){const n=e.getChannelData(0);let a=0;for(let t=1;t<n.length;t++)n[t]>=0!=n[t-1]>=0&&a++;return a/n.length}createSpectrogram(e,n=1024,a=512){const t=e.getChannelData(0),l=e.sampleRate,r=[];for(let s=0;s<t.length-n;s+=a){const i=t.slice(s,s+n);for(let h=0;h<i.length;h++)i[h]*=.5*(1-Math.cos(2*Math.PI*h/(i.length-1)));const c=this.performFFT(i).map(h=>20*Math.log10(Math.max(h,1e-10)));r.push({time:s/l,spectrum:c})}return r}destroy(){this.analyser&&(this.analyser.disconnect(),this.analyser=null),this.dataArray=null}}export{g as SpectrumAnalyzer};
//# sourceMappingURL=SpectrumAnalyzer-7b28bc35.js.map
