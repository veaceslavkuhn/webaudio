{"version":3,"file":"SpectrumAnalyzer-7b28bc35.js","sources":["../../src/services/SpectrumAnalyzer.js"],"sourcesContent":["export class SpectrumAnalyzer {\n\tconstructor(audioContext) {\n\t\tthis.audioContext = audioContext;\n\t\tthis.analyser = null;\n\t\tthis.dataArray = null;\n\t\tthis.bufferLength = 0;\n\t\tthis.fftSize = 2048;\n\t}\n\n\tinitialize(fftSize = 2048) {\n\t\tthis.fftSize = fftSize;\n\t\tthis.analyser = this.audioContext.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\t\tthis.bufferLength = this.analyser.frequencyBinCount;\n\t\tthis.dataArray = new Uint8Array(this.bufferLength);\n\t\t\n\t\treturn this.analyser;\n\t}\n\n\tgetFrequencyData() {\n\t\tif (!this.analyser) return null;\n\t\t\n\t\tthis.analyser.getByteFrequencyData(this.dataArray);\n\t\treturn new Uint8Array(this.dataArray);\n\t}\n\n\tgetTimeDomainData() {\n\t\tif (!this.analyser) return null;\n\t\t\n\t\tthis.analyser.getByteTimeDomainData(this.dataArray);\n\t\treturn new Uint8Array(this.dataArray);\n\t}\n\n\tanalyzeAudioBuffer(audioBuffer) {\n\t\t// Analyze a complete audio buffer (for offline analysis)\n\t\tconst channelData = audioBuffer.getChannelData(0);\n\t\tconst sampleRate = audioBuffer.sampleRate;\n\t\tconst windowSize = this.fftSize;\n\t\tconst hopSize = windowSize / 2;\n\t\t\n\t\tconst results = [];\n\t\t\n\t\tfor (let i = 0; i < channelData.length - windowSize; i += hopSize) {\n\t\t\tconst window = channelData.slice(i, i + windowSize);\n\t\t\tconst spectrum = this.performFFT(window);\n\t\t\t\n\t\t\tresults.push({\n\t\t\t\ttime: i / sampleRate,\n\t\t\t\tfrequencies: spectrum\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn results;\n\t}\n\n\tperformFFT(samples) {\n\t\t// Simple FFT implementation for spectrum analysis\n\t\tconst N = samples.length;\n\t\tconst spectrum = new Array(N / 2);\n\t\t\n\t\tfor (let k = 0; k < N / 2; k++) {\n\t\t\tlet real = 0;\n\t\t\tlet imag = 0;\n\t\t\t\n\t\t\tfor (let n = 0; n < N; n++) {\n\t\t\t\tconst angle = -2 * Math.PI * k * n / N;\n\t\t\t\treal += samples[n] * Math.cos(angle);\n\t\t\t\timag += samples[n] * Math.sin(angle);\n\t\t\t}\n\t\t\t\n\t\t\tspectrum[k] = Math.sqrt(real * real + imag * imag);\n\t\t}\n\t\t\n\t\treturn spectrum;\n\t}\n\n\tgetFrequencyBins(sampleRate) {\n\t\tconst bins = [];\n\t\tconst nyquist = sampleRate / 2;\n\t\t\n\t\tfor (let i = 0; i < this.bufferLength; i++) {\n\t\t\tbins.push((i * nyquist) / this.bufferLength);\n\t\t}\n\t\t\n\t\treturn bins;\n\t}\n\n\tgetPeakFrequency(frequencyData, sampleRate) {\n\t\tlet maxValue = 0;\n\t\tlet maxIndex = 0;\n\t\t\n\t\tfor (let i = 0; i < frequencyData.length; i++) {\n\t\t\tif (frequencyData[i] > maxValue) {\n\t\t\t\tmaxValue = frequencyData[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\tconst nyquist = sampleRate / 2;\n\t\treturn (maxIndex * nyquist) / frequencyData.length;\n\t}\n\n\tgetSpectralCentroid(frequencyData, sampleRate) {\n\t\tlet weightedSum = 0;\n\t\tlet magnitudeSum = 0;\n\t\tconst nyquist = sampleRate / 2;\n\t\t\n\t\tfor (let i = 0; i < frequencyData.length; i++) {\n\t\t\tconst frequency = (i * nyquist) / frequencyData.length;\n\t\t\tconst magnitude = frequencyData[i];\n\t\t\t\n\t\t\tweightedSum += frequency * magnitude;\n\t\t\tmagnitudeSum += magnitude;\n\t\t}\n\t\t\n\t\treturn magnitudeSum > 0 ? weightedSum / magnitudeSum : 0;\n\t}\n\n\tgetRMS(audioBuffer) {\n\t\tlet sum = 0;\n\t\tconst channelData = audioBuffer.getChannelData(0);\n\t\t\n\t\tfor (let i = 0; i < channelData.length; i++) {\n\t\t\tsum += channelData[i] * channelData[i];\n\t\t}\n\t\t\n\t\treturn Math.sqrt(sum / channelData.length);\n\t}\n\n\tgetZeroCrossingRate(audioBuffer) {\n\t\tconst channelData = audioBuffer.getChannelData(0);\n\t\tlet crossings = 0;\n\t\t\n\t\tfor (let i = 1; i < channelData.length; i++) {\n\t\t\tif ((channelData[i] >= 0) !== (channelData[i - 1] >= 0)) {\n\t\t\t\tcrossings++;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn crossings / channelData.length;\n\t}\n\n\tcreateSpectrogram(audioBuffer, windowSize = 1024, hopSize = 512) {\n\t\tconst channelData = audioBuffer.getChannelData(0);\n\t\tconst sampleRate = audioBuffer.sampleRate;\n\t\tconst spectrogram = [];\n\t\t\n\t\tfor (let i = 0; i < channelData.length - windowSize; i += hopSize) {\n\t\t\tconst window = channelData.slice(i, i + windowSize);\n\t\t\t\n\t\t\t// Apply Hann window\n\t\t\tfor (let j = 0; j < window.length; j++) {\n\t\t\t\twindow[j] *= 0.5 * (1 - Math.cos(2 * Math.PI * j / (window.length - 1)));\n\t\t\t}\n\t\t\t\n\t\t\tconst spectrum = this.performFFT(window);\n\t\t\t\n\t\t\t// Convert to dB\n\t\t\tconst dbSpectrum = spectrum.map(magnitude => \n\t\t\t\t20 * Math.log10(Math.max(magnitude, 1e-10))\n\t\t\t);\n\t\t\t\n\t\t\tspectrogram.push({\n\t\t\t\ttime: i / sampleRate,\n\t\t\t\tspectrum: dbSpectrum\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn spectrogram;\n\t}\n\n\tdestroy() {\n\t\tif (this.analyser) {\n\t\t\tthis.analyser.disconnect();\n\t\t\tthis.analyser = null;\n\t\t}\n\t\tthis.dataArray = null;\n\t}\n}\n"],"names":["SpectrumAnalyzer","audioContext","fftSize","audioBuffer","channelData","sampleRate","windowSize","hopSize","results","i","window","spectrum","samples","N","k","real","imag","n","angle","bins","nyquist","frequencyData","maxValue","maxIndex","weightedSum","magnitudeSum","frequency","magnitude","sum","crossings","spectrogram","j","dbSpectrum"],"mappings":"AAAO,MAAMA,CAAiB,CAC7B,YAAYC,EAAc,CACzB,KAAK,aAAeA,EACpB,KAAK,SAAW,KAChB,KAAK,UAAY,KACjB,KAAK,aAAe,EACpB,KAAK,QAAU,IACf,CAED,WAAWC,EAAU,KAAM,CAC1B,YAAK,QAAUA,EACf,KAAK,SAAW,KAAK,aAAa,eAAc,EAChD,KAAK,SAAS,QAAUA,EACxB,KAAK,aAAe,KAAK,SAAS,kBAClC,KAAK,UAAY,IAAI,WAAW,KAAK,YAAY,EAE1C,KAAK,QACZ,CAED,kBAAmB,CAClB,OAAK,KAAK,UAEV,KAAK,SAAS,qBAAqB,KAAK,SAAS,EAC1C,IAAI,WAAW,KAAK,SAAS,GAHT,IAI3B,CAED,mBAAoB,CACnB,OAAK,KAAK,UAEV,KAAK,SAAS,sBAAsB,KAAK,SAAS,EAC3C,IAAI,WAAW,KAAK,SAAS,GAHT,IAI3B,CAED,mBAAmBC,EAAa,CAE/B,MAAMC,EAAcD,EAAY,eAAe,CAAC,EAC1CE,EAAaF,EAAY,WACzBG,EAAa,KAAK,QAClBC,EAAUD,EAAa,EAEvBE,EAAU,CAAA,EAEhB,QAASC,EAAI,EAAGA,EAAIL,EAAY,OAASE,EAAYG,GAAKF,EAAS,CAClE,MAAMG,EAASN,EAAY,MAAMK,EAAGA,EAAIH,CAAU,EAC5CK,EAAW,KAAK,WAAWD,CAAM,EAEvCF,EAAQ,KAAK,CACZ,KAAMC,EAAIJ,EACV,YAAaM,CACjB,CAAI,CACD,CAED,OAAOH,CACP,CAED,WAAWI,EAAS,CAEnB,MAAMC,EAAID,EAAQ,OACZD,EAAW,IAAI,MAAME,EAAI,CAAC,EAEhC,QAASC,EAAI,EAAGA,EAAID,EAAI,EAAGC,IAAK,CAC/B,IAAIC,EAAO,EACPC,EAAO,EAEX,QAASC,EAAI,EAAGA,EAAIJ,EAAGI,IAAK,CAC3B,MAAMC,EAAQ,GAAK,KAAK,GAAKJ,EAAIG,EAAIJ,EACrCE,GAAQH,EAAQK,CAAC,EAAI,KAAK,IAAIC,CAAK,EACnCF,GAAQJ,EAAQK,CAAC,EAAI,KAAK,IAAIC,CAAK,CACnC,CAEDP,EAASG,CAAC,EAAI,KAAK,KAAKC,EAAOA,EAAOC,EAAOA,CAAI,CACjD,CAED,OAAOL,CACP,CAED,iBAAiBN,EAAY,CAC5B,MAAMc,EAAO,CAAA,EACPC,EAAUf,EAAa,EAE7B,QAASI,EAAI,EAAGA,EAAI,KAAK,aAAcA,IACtCU,EAAK,KAAMV,EAAIW,EAAW,KAAK,YAAY,EAG5C,OAAOD,CACP,CAED,iBAAiBE,EAAehB,EAAY,CAC3C,IAAIiB,EAAW,EACXC,EAAW,EAEf,QAASd,EAAI,EAAGA,EAAIY,EAAc,OAAQZ,IACrCY,EAAcZ,CAAC,EAAIa,IACtBA,EAAWD,EAAcZ,CAAC,EAC1Bc,EAAWd,GAIb,MAAMW,EAAUf,EAAa,EAC7B,OAAQkB,EAAWH,EAAWC,EAAc,MAC5C,CAED,oBAAoBA,EAAehB,EAAY,CAC9C,IAAImB,EAAc,EACdC,EAAe,EACnB,MAAML,EAAUf,EAAa,EAE7B,QAASI,EAAI,EAAGA,EAAIY,EAAc,OAAQZ,IAAK,CAC9C,MAAMiB,EAAajB,EAAIW,EAAWC,EAAc,OAC1CM,EAAYN,EAAcZ,CAAC,EAEjCe,GAAeE,EAAYC,EAC3BF,GAAgBE,CAChB,CAED,OAAOF,EAAe,EAAID,EAAcC,EAAe,CACvD,CAED,OAAOtB,EAAa,CACnB,IAAIyB,EAAM,EACV,MAAMxB,EAAcD,EAAY,eAAe,CAAC,EAEhD,QAASM,EAAI,EAAGA,EAAIL,EAAY,OAAQK,IACvCmB,GAAOxB,EAAYK,CAAC,EAAIL,EAAYK,CAAC,EAGtC,OAAO,KAAK,KAAKmB,EAAMxB,EAAY,MAAM,CACzC,CAED,oBAAoBD,EAAa,CAChC,MAAMC,EAAcD,EAAY,eAAe,CAAC,EAChD,IAAI0B,EAAY,EAEhB,QAASpB,EAAI,EAAGA,EAAIL,EAAY,OAAQK,IAClCL,EAAYK,CAAC,GAAK,GAAQL,EAAYK,EAAI,CAAC,GAAK,GACpDoB,IAIF,OAAOA,EAAYzB,EAAY,MAC/B,CAED,kBAAkBD,EAAaG,EAAa,KAAMC,EAAU,IAAK,CAChE,MAAMH,EAAcD,EAAY,eAAe,CAAC,EAC1CE,EAAaF,EAAY,WACzB2B,EAAc,CAAA,EAEpB,QAASrB,EAAI,EAAGA,EAAIL,EAAY,OAASE,EAAYG,GAAKF,EAAS,CAClE,MAAMG,EAASN,EAAY,MAAMK,EAAGA,EAAIH,CAAU,EAGlD,QAASyB,EAAI,EAAGA,EAAIrB,EAAO,OAAQqB,IAClCrB,EAAOqB,CAAC,GAAK,IAAO,EAAI,KAAK,IAAI,EAAI,KAAK,GAAKA,GAAKrB,EAAO,OAAS,EAAE,GAMvE,MAAMsB,EAHW,KAAK,WAAWtB,CAAM,EAGX,IAAIiB,GAC/B,GAAK,KAAK,MAAM,KAAK,IAAIA,EAAW,KAAK,CAAC,CAC9C,EAEGG,EAAY,KAAK,CAChB,KAAMrB,EAAIJ,EACV,SAAU2B,CACd,CAAI,CACD,CAED,OAAOF,CACP,CAED,SAAU,CACL,KAAK,WACR,KAAK,SAAS,aACd,KAAK,SAAW,MAEjB,KAAK,UAAY,IACjB,CACF"}